<!DOCTYPE html>
<html>
    <head>
	<meta charset="UTF-8">
	<title>Cuisine</title>
	<link rel="stylesheet" href="stylesheet.css" type="text/css">
	<link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
	<link rel="stylesheet" href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
	<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
	<script src="https://code.jquery.com/jquery-3.3.1.js" integrity="sha256-2Kok7MbOyxpgUVvAk/HJ2jigOSYS2auK4Pfzbm7uH60=" crossorigin="anonymous"></script>
	<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    </head>
    <body>

	<form>
            <input class="ui-widget" type="text" id="name" placeholder="e.g. Kiwi">
            <input type="number" id="calories" placeholder="Calories">
            <input type="number" id="proteins" placeholder="proteins">
            <input type="number" id="carbohydrates" placeholder="Carbohydrates">
            <input type="number" id="fats" placeholder="Fats">
    	    <input type="button" class="add-row" value="Add Row">
	    <input type="button" class="load-example" value="Load Example">
	</form>

	<table class="ingredientsTable table">
	    <thead>
		<tr>
		    <th></th>
		    <th>Ingredients</th>
		    <th>Calories (for 100 grams)</th>
		    <th>Quantity (in grams)</th>
		    <th>Min quantity (in grams)</th>
		    <th>Max quantity (in grams)</th>
		</tr>
	    </thead>
	    <tbody class="ingredientsTableBody">
	    </tbody>
	</table>
	<button type="button" class="delete-row">Delete Row</button>
	<p>Total calories: <span class="totalCalories"></span> kcal</p>
	<p>Total proteins: <span class="totalProteins"></span> g</p>
	<p>Total carbohydrates: <span class="totalCarbohydrates"></span> g</p>
	<p>Total fats: <span class="totalFats"></span> g</p>

	<label for="targetCalories">Target calories:</label>
	<input type="number" id="targetCalories" name="targetCalories"
	       min="50" max="1000">

        <label for="targetProteins">Target proteins:</label>
	<input type="number" id="targetProteins" name="targetProteins"
	       min="0" max="1000">

        <label for="targetCarbohydrates">Target carbohydrates:</label>
	<input type="number" id="targetCarbohydrates" name="targetCarbohydrates"
	       min="0" max="1000">
	
        <label for="targetFats">Target fats:</label>
	<input type="number" id="targetFats" name="targetFats"
	       min="0" max="1000">
	
	<button class="btn btn-success" onclick="run()">Run</button>
	
	
    </body>

    <script>

     var data = localStorage.getItem("data")
     if (data) {
	 // convert it to an array so we can loop over it
	 console.log(data)
	 data = JSON.parse(data)
     } else {
	 data = []
     }

     var dataStore = [
         {
	     "name": "Lait d'avoine",
	     "calories": 42,
	     "proteins": 0.5,
	     "carbohydrates": 7.8,
	     "fats": 1.1,
	     "quantity": 100
	 },	 
	 {
	     "name": "Farine de riz",
	     "calories": 357,
	     "proteins": 8,
	     "carbohydrates": 73.9,
	     "fats": 2.5,
	     "quantity": 100
	 },
	 {
	     "name": "Framboises",
	     "calories": 49.2,
	     "proteins": 1.19,
	     "carbohydrates": 5.83,
	     "fats": 0.8,
	     "quantity": 100
	 },

	 {
	     "name": "Lait de soja",
	     "calories": 37.1,
	     "proteins": 3.63,
	     "carbohydrates": 0.7,
	     "fats": 2.07,
	     "quantity": 100
	 },

	 {
	     "name": "Blancs d'oeufs",
	     "calories": 17,
	     "proteins": 3.6,
	     "carbohydrates": 0.2,
	     "fats": 0.1,
	     "quantity": 100
	 },
         {
	     "name": "Jaunes d'oeufs",
	     "calories": 55,
	     "proteins": 2.7,
	     "carbohydrates": 0.6,
	     "fats": 4.5,
	     "quantity": 100
	 },
	 {
	     "name": "Huile d'olive",
	     "calories": 900,
	     "proteins": 0,
	     "carbohydrates": 0,
	     "fats": 100,
	     "quantity": 100
	 }
     ]


     function fillTable() {

	 var consQtyMax = localStorage.getItem("consQtyMax");
	 var consQtyMin = localStorage.getItem("consQtyMin"); 

	 if (consQtyMin) {
	     consQtyMin = JSON.parse(consQtyMin)
	 }
	 
	 if (consQtyMax) {
	     consQtyMax = JSON.parse(consQtyMax)
	 }
	 
	 var _str = ""
	 for (i = 0; i < data.length; ++i) {
	     _str += "<tr><td><input type='checkbox' name='record'></td><td>" 
	     _str += data[i].name
	     _str += "</td><td>"
	     _str += data[i].calories
	     _str += "</td><td>"
	     _str += data[i].quantity
	     _str += "</td><td>"
	     _str += '<input type="number" class="cons-qty-min" min="0" max="1000" '
	     if (consQtyMin){
		 _str += 'value="' + consQtyMin[i] + '" '
	     }
	     _str += "></td><td>"
	     
	     _str += '<input type="number" class="cons-qty-max" min="0" max="1000" '
	     if (consQtyMax){
		 _str += 'value="' + consQtyMax[i] + '" '
	     }

	     _str += "></td></tr>"
	 }
	 document.getElementsByClassName("ingredientsTableBody")[0].innerHTML = _str;
     }

     function updateTotal() {
	 var _sumCalories = 0;
	 var _sumProteins = 0;
	 var _sumCarbohdrates = 0;
	 var _sumFats = 0;

	 for (i = 0; i < data.length; ++i) {
	     _sumCalories += (data[i].calories * data[i].quantity) / 100
	     _sumProteins += (data[i].proteins * data[i].quantity) / 100
	     _sumCarbohdrates += (data[i].carbohydrates * data[i].quantity) / 100
	     _sumFats += (data[i].fats * data[i].quantity) / 100
	 }
	 
	 document.getElementsByClassName("totalCalories")[0].innerHTML = _sumCalories;
	 document.getElementsByClassName("totalProteins")[0].innerHTML = _sumProteins;
	 document.getElementsByClassName("totalCarbohydrates")[0].innerHTML = _sumCarbohdrates;
	 document.getElementsByClassName("totalFats")[0].innerHTML = _sumFats;
     }

     function processInputConstraints(x) {
	 var v = parseFloat(x.value);
	 if (isNaN(v)) {
	     return -1;
	 } else {
	     return v;
	 }
     }

     function createEvent() {

	 var event = {
	     "target": {
		 "proteins": parseFloat(document.getElementById("targetProteins").value),
		 "carbohydrates": 0,
		 "fats": 0,
		 "calories": parseFloat(document.getElementById("targetCalories").value)
	     },
	     "ingredients": []
	 };

	 // fetch constraints on ingredient quantities
	 // cons-qty-min
	 var consQtyMin = Array.from($(".cons-qty-min")).map(processInputConstraints);
	 localStorage.setItem("consQtyMin", JSON.stringify(consQtyMin));
	 // cons-qty-max
	 var consQtyMax = Array.from($(".cons-qty-max")).map(processInputConstraints);
         localStorage.setItem("consQtyMax", JSON.stringify(consQtyMax));
	 for (i = 0; i < data.length; ++i) {
	     event.ingredients.push(
		 {
		     "name": data[i].name,
		     "quantity": data[i].quantity,
		     "unit": "g",
		     "calories": data[i].calories,
		     "proteins": data[i].proteins,
		     "carbohydrates": data[i].carbohydrates,
		     "fats": data[i].fats,
		     "price": 1.0
		 }
	     )
	     if (consQtyMin[i] != -1) {
		 event.ingredients[event.ingredients.length-1]["quantity_min"] = consQtyMin[i] / 100.0;
	     }
	     if (consQtyMax[i] != -1) {
		 event.ingredients[event.ingredients.length-1]["quantity_max"] = consQtyMax[i] / 100.0;
	     }

	 }
	 return event;
     }

     function run() {
	 console.log("Button clicked");
	 var event = createEvent();

	 console.log(event)
	 
	 var xhr = new XMLHttpRequest();
	 xhr.open('POST', "http://localhost:7777/");
	 xhr.setRequestHeader('Content-Type', 'application/json');
	 xhr.onload = function() {
	     if (xhr.status === 200) {
		 var response = JSON.parse(xhr.responseText);
		 for(var i = 0; i < response.quantities.length; ++i) {
		     data[i].quantity = response.quantities[i] * 100;
		     updateTotal();
		     fillTable();
		 }

	     }
	 };
	 xhr.send(JSON.stringify(event));
     }


     $(document).ready(function(){
         $(".add-row").click(function(){
             var name = $("#name").val();
             var calories = $("#calories").val();
             var proteins = $("#proteins").val();
             var carbohydrates = $("#carbohydrates").val();
             var fats = $("#fats").val();
	     //             var markup = "<tr><td><input type='checkbox' name='record'></td><td>" + name + "</td><td>" + calories + "</td><td>" + proteins + "</td><td>" + carbohydrates + "</td><td>" + fats + "</td></tr>";
	     var markup = "<tr><td><input type='checkbox' name='record'></td><td>" + name + "</td><td>" + calories + "</td><td>" + "100" + "</td><td> <input type='number' class='cons-qty-min' min='0' max='1000'>" + "</td><td> <input type='number' class='cons-qty-max' min='0' max='1000'>" + "</td></tr>";
	     data.push({
		 "name": name,
		 "calories": parseFloat(calories),
		 "proteins": parseFloat(proteins),
		 "carbohydrates": parseFloat(carbohydrates),
		 "fats": parseFloat(fats),
		 "quantity": 100
	     });
	     localStorage.setItem("data", JSON.stringify(data))
             $("table tbody").append(markup);
         });
         
         // Find and remove selected table rows
         $(".delete-row").click(function(){
             $("table tbody").find('input[name="record"]').each(function(){
		 if($(this).is(":checked")){
		     // .childNodes[1].innerText)
		     var ingredientNameToDelete = $(this).parents("tr")[0].cells[1].innerText;
		     var idxToDelete = data.findIndex(function(elem){return elem.name == ingredientNameToDelete});
		     data.splice(idxToDelete,1);
		     $(this).parents("tr").remove();
		 }
             });
         });
     });    

      $( function() {


	  function split( val ) {
	      return val.split( /,\s*/ );
	  }
	  function extractLast( term ) {
	      return split( term ).pop();          
	  }

	  $( "#name" )
	  // don't navigate away from the field on tab when selecting an item
	      .on( "keydown", function( event ) {
		  if ( event.keyCode === $.ui.keyCode.TAB &&
		       $( this ).autocomplete( "instance" ).menu.active ) {
		      event.preventDefault();
		  }
	      })
	      .autocomplete({
		  source: function( request, response ) {
		      $.getJSON( "/search", {
			  term: extractLast( request.term )
		      }, response );
		  },
		  search: function() {
		      // custom minLength
		      var term = extractLast( this.value );
		      if ( term.length < 2 ) {
			  return false;
		      }
		  },
		  focus: function() {
		      // prevent value inserted on focus
		      return false;
		  },
		  select: function( event, ui ) {

		      this.value = ui.item.label
		      ingredient = ui.item.value
		      
		      console.log(ingredient);
		      $("#calories")[0].value = ingredient.calories
		      $("#proteins")[0].value = ingredient.proteins
		      $("#carbohydrates")[0].value = ingredient.carbohydrates
		      $("#fats")[0].value = ingredient.fats

		      return false;
		  }
	      });
      });
     
     fillTable();
     updateTotal();
    </script>
    
</html>
